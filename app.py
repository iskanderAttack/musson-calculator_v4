import streamlit as st
import matplotlib.pyplot as plt
import pandas as pd
import math
from utils.calculations import calc_heat_loss, musson_power, calculate_heating_economics
from utils.constants import MATERIALS, MUSSON_MODELS, FUEL_TYPES

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–µ—á–∏ –ú—É—Å—Å–æ–Ω",
    page_icon="üî•",
    layout="wide"
)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–ª–µ–π
def load_css():
    st.markdown("""
    <style>
    .main .block-container {
        padding-top: 2rem;
    }
    h1, h2, h3 {
        color: #2E86AB;
    }
    .stButton>button {
        background-color: #2E86AB;
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 0.5rem;
        width: 100%;
    }
    .stButton>button:hover {
        background-color: #1a5a7a;
    }
    </style>
    """, unsafe_allow_html=True)

load_css()

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    st.title("üî• –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ–¥–±–æ—Ä–∞ –ø–µ—á–∏ –ú—É—Å—Å–æ–Ω")

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    render_sidebar()
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Å–µ—Å—Å–∏–∏
    params = get_parameters_from_session()
    
    # –†–∞—Å—á–µ—Ç—ã
    if st.sidebar.button("üîÑ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å", type="primary"):
        calculate_and_display_results(params)

def render_sidebar():
    st.sidebar.header("üè≠ –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –ü–û–ú–ï–©–ï–ù–ò–Ø")
    st.sidebar.markdown("---")

    col1, col2 = st.sidebar.columns(2)
    with col1:
        area_m2 = st.number_input("–ü–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è (–º¬≤)", 20, 500, 100, key="area")
    with col2:
        height_m = st.number_input("–í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤ (–º)", 2.0, 5.0, 3.5, key="height")

    material = st.sidebar.selectbox("–ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω", list(MATERIALS.keys()), key="material")
    wall_thickness = st.sidebar.slider("–¢–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–Ω (—Å–º)", 10, 100, 40, key="wall_thickness") / 100

    st.sidebar.markdown("---")
    st.sidebar.header("ü™ü –û–ö–ù–ê –ò –î–í–ï–†–ò")
    windows_m2 = st.sidebar.number_input("–ü–ª–æ—â–∞–¥—å –æ–∫–æ–Ω (–º¬≤)", 0, 50, 10, key="windows")
    doors_m2 = st.sidebar.number_input("–ü–ª–æ—â–∞–¥—å –¥–≤–µ—Ä–µ–π (–º¬≤)", 0, 10, 3, key="doors")
    roof_insulation = st.sidebar.checkbox("–£—Ç–µ–ø–ª—ë–Ω–Ω–∞—è –∫—Ä—ã—à–∞", value=False, key="roof")

    st.sidebar.markdown("---")
    st.sidebar.header("üå°Ô∏è –¢–ï–ú–ü–ï–†–ê–¢–£–†–´")
    col1, col2 = st.sidebar.columns(2)
    with col1:
        t_in = st.sidebar.slider("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)", 10, 25, 18, key="t_in")
    with col2:
        t_out = st.sidebar.slider("–ù–∞—Ä—É–∂–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)", -50, 10, -15, key="t_out")

    st.sidebar.markdown("---")
    st.sidebar.header("‚ö° –†–ï–ñ–ò–ú –†–ê–ë–û–¢–´")
    working_hours = st.sidebar.selectbox("–†–∞–±–æ—á–∏–π –¥–µ–Ω—å (—á–∞—Å–æ–≤)", [8, 12, 16], index=0, key="working_hours")

    st.sidebar.markdown("---")
    st.sidebar.header("ü™µ –¢–û–ü–õ–ò–í–û")
    fuel_type = st.sidebar.selectbox("–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞", list(FUEL_TYPES.keys()), key="fuel_type")
    fill_fraction = st.sidebar.slider("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ–ø–∫–∏ (%)", 50, 100, 90, key="fill_fraction") / 100
    efficiency = st.sidebar.slider("–ö–ü–î –∫–æ—Ç–ª–∞ (%)", 70, 95, 85, key="efficiency") / 100
    burn_hours = st.sidebar.selectbox("–í—Ä–µ–º—è –≥–æ—Ä–µ–Ω–∏—è (—á)", [2, 4, 6, 12], index=2, key="burn_hours")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é
    st.session_state.params = {
        'area_m2': area_m2, 'height_m': height_m, 'material': material,
        'wall_thickness': wall_thickness, 'windows_m2': windows_m2,
        'doors_m2': doors_m2, 'roof_insulation': roof_insulation,
        't_in': t_in, 't_out': t_out, 'working_hours': working_hours,
        'fuel_type': fuel_type, 'fill_fraction': fill_fraction,
        'efficiency': efficiency, 'burn_hours': burn_hours
    }

def get_parameters_from_session():
    return st.session_state.get('params', {})

def calculate_and_display_results(params):
    if not params:
        st.warning("‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –Ω–∞–∂–º–∏—Ç–µ '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å'")
        return

    heat_loss_kw = calc_heat_loss(
        params['area_m2'], params['height_m'], params['wall_thickness'], 
        params['material'], params['t_in'], params['t_out'], 
        params['windows_m2'], params['doors_m2'], params['roof_insulation']
    )

    volume_m3 = params['area_m2'] * params['height_m']

    display_main_metrics(heat_loss_kw, volume_m3)
    display_models_comparison(heat_loss_kw, params)
    display_recommendations(heat_loss_kw, params)

def display_main_metrics(heat_loss_kw, volume_m3):
    st.header("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´")

    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("–¢–µ–ø–ª–æ–ø–æ—Ç–µ—Ä–∏", f"{heat_loss_kw:.1f} –∫–í—Ç")
    with col2:
        st.metric("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –º–æ—â–Ω–æ—Å—Ç—å", f"{heat_loss_kw * 1.2:.1f} –∫–í—Ç")
    with col3:
        st.metric("–û–±—ä—ë–º", f"{volume_m3:.0f} –º¬≥")

def display_models_comparison(heat_loss_kw, params):
    st.subheader("üî• –°–†–ê–í–ù–ï–ù–ò–ï –ú–û–î–ï–õ–ï–ô")

    results = []
    for model, mp in MUSSON_MODELS.items():
        useful_kwh, p_kw, m_fuel = musson_power(
            mp["volume_l"], params['fill_fraction'], 
            params['fuel_type'], params['efficiency'], params['burn_hours']
        )
        results.append({
            "model": model, 
            "power": p_kw, 
            "fuel_per_load": m_fuel,
            "volume_l": mp["volume_l"],
            "price": mp["price"]
        })

    df = pd.DataFrame(results)
    df["–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ"] = df["power"] >= heat_loss_kw * 1.2
    df["–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è"] = df["–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ"].map({True: "‚úÖ –ü–æ–¥—Ö–æ–¥–∏—Ç", False: "‚ùå –°–ª–∞–±–∞—è"})

    show_df = df[["model", "power", "fuel_per_load", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è"]].copy()
    show_df.columns = ["–ú–æ–¥–µ–ª—å", "–ú–æ—â–Ω–æ—Å—Ç—å (–∫–í—Ç)", "–¢–æ–ø–ª–∏–≤–æ (–∫–≥)", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è"]
    show_df["–ú–æ—â–Ω–æ—Å—Ç—å (–∫–í—Ç)"] = show_df["–ú–æ—â–Ω–æ—Å—Ç—å (–∫–í—Ç)"].round(1)
    show_df["–¢–æ–ø–ª–∏–≤–æ (–∫–≥)"] = show_df["–¢–æ–ø–ª–∏–≤–æ (–∫–≥)"].round(1)

    st.dataframe(show_df, use_container_width=True)

    fig, ax = plt.subplots(figsize=(8, 4))
    models = [r["model"] for r in results]
    powers = [r["power"] for r in results]
    colors = ['green' if p >= heat_loss_kw * 1.2 else 'red' for p in powers]

    bars = ax.bar(models, powers, color=colors, alpha=0.7)
    ax.axhline(y=heat_loss_kw * 1.2, color="blue", linestyle="--", 
               label=f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {heat_loss_kw * 1.2:.1f} –∫–í—Ç")
    ax.set_ylabel("–ú–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç")
    ax.set_title("–ú–æ—â–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π")
    ax.legend()
    ax.tick_params(axis='x', rotation=45)
    ax.grid(axis='y', alpha=0.3)

    for bar, power in zip(bars, powers):
        ax.text(bar.get_x() + bar.get_width()/2., bar.get_height() + 0.1,
                f'{power:.1f}', ha='center', va='bottom')

    plt.tight_layout()
    st.pyplot(fig)

def display_recommendations(heat_loss_kw, params):
    st.subheader("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")

    results = []
    for model, mp in MUSSON_MODELS.items():
        useful_kwh, p_kw, m_fuel = musson_power(
            mp["volume_l"], params['fill_fraction'], 
            params['fuel_type'], params['efficiency'], params['burn_hours']
        )
        results.append({"model": model, "power": p_kw, "price": mp["price"]})

    suitable = [r for r in results if r["power"] >= heat_loss_kw * 1.2]

    if suitable:
        best = min(suitable, key=lambda x: x["price"])
        display_best_model_info(best, heat_loss_kw, params)
    else:
        st.error("‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π –º–æ–¥–µ–ª–∏")
        st.write("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: —É–≤–µ–ª–∏—á—å—Ç–µ –ö–ü–î, —Ç–æ–ø–ª–∏–≤–æ, —É—Ç–µ–ø–ª–µ–Ω–∏–µ, –∑–∞–∫–ª–∞–¥–∫—É.")

def display_best_model_info(best_model, heat_loss_kw, params):
    st.success(f"**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –º–æ–¥–µ–ª—å: {best_model['model']}**")
    st.write(f"‚Ä¢ –ú–æ—â–Ω–æ—Å—Ç—å: {best_model['power']:.1f} –∫–í—Ç (–Ω—É–∂–Ω–æ {heat_loss_kw*1.2:.1f} –∫–í—Ç)")
    st.write(f"‚Ä¢ –í—Ä–µ–º—è –≥–æ—Ä–µ–Ω–∏—è: –¥–æ {params['burn_hours']} —á")
    st.write(f"‚Ä¢ –¶–µ–Ω–∞: {best_model['price']:,} —Ä—É–±.".replace(',', ' '))

    economics = calculate_heating_economics(
        heat_loss_kw, best_model['power'], params['working_hours'],
        params['fuel_type'], params['efficiency'], 
        FUEL_TYPES[params['fuel_type']]["price_per_ton"]
    )
    loads = max(1, math.ceil(params['working_hours'] / params['burn_hours']))

    st.write("**–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞:**")
    st.write(f"‚Ä¢ –ó–∞–∫–ª–∞–¥–æ–∫: {loads}")
    st.write(f"‚Ä¢ –í –¥–µ–Ω—å: {economics['daily_fuel_kg']:.1f} –∫–≥")
    st.write(f"‚Ä¢ –í –º–µ—Å—è—Ü: {economics['daily_fuel_kg']*22:.0f} –∫–≥")
    st.write(f"‚Ä¢ –ó–∞ —Å–µ–∑–æ–Ω: {economics['daily_fuel_kg']*22*7:.0f} –∫–≥")

    st.write("**–°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–æ–ø–ª–µ–Ω–∏—è:**")
    st.write(f"‚Ä¢ –í –¥–µ–Ω—å: {economics['daily_cost']:.0f} —Ä—É–±.")
    st.write(f"‚Ä¢ –í –º–µ—Å—è—Ü: {economics['monthly_cost']:.0f} —Ä—É–±.")
    st.write(f"‚Ä¢ –ó–∞ —Å–µ–∑–æ–Ω: {economics['seasonal_cost']:.0f} —Ä—É–±.")

if __name__ == "__main__":
    main()
